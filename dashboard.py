{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "664f4647-74ec-40aa-b9fe-daefb954e13b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def download_bbg_data(tickers, flds, start_date, end_date):\n",
    "    hist = blp.bdh(tickers = tickers, flds = fields, start_date = start_date, end_date=end_date)\n",
    "\n",
    "    # Extract date from index & reset index\n",
    "    hist[\"Date\"] = hist.index\n",
    "    hist.insert(0, 'Date', hist.pop('Date'))\n",
    "    hist = hist.reset_index(drop = True)\n",
    "    hist[\"Date\"] = pd.to_datetime(hist[\"Date\"])\n",
    "\n",
    "    # Flatten columns\n",
    "    hist.columns = ['_'.join(col).strip() if isinstance(col, tuple) else col for col in hist.columns]\n",
    "\n",
    "    # Remove 'Curncy_PX_LAST' from column names\n",
    "    hist.columns = hist.columns.str.replace(' Curncy_PX_LAST', '', regex=False)\n",
    "    \n",
    "    hist.rename(columns = {\"Date_\" : \"Date\"}, inplace = True)\n",
    "    return hist\n",
    "\n",
    "\n",
    "tickers_spx = [\"SPX Index\",\n",
    "               #\"BBDXY Curncy\",\n",
    "               \"EURUSD Curncy\",\n",
    "               #\"GBPUSD Curncy\",\n",
    "               #\"AUDUSD Curncy\",\n",
    "               #\"NZDUSD Curncy\",\n",
    "               #\"CADUSD Curncy\",\n",
    "               #\"JPYUSD Curncy\",\n",
    "               #\"CHFUSD Curncy\",\n",
    "               #\"SEKUSD Curncy\",\n",
    "               #\"GBPUSD Curncy\",\n",
    "               #\"EURSEK Curncy\",\n",
    "               #\"CHFSEK Curncy\",\n",
    "               #\"SEKJPY Curncy\",\n",
    "               #\"EURCHF Curncy\",\n",
    "               #\"EURJPY Curncy\",\n",
    "               #\"GBPSEK Curncy\",\n",
    "              ]\n",
    "fields = [\"PX_LAST\"]\n",
    "start_date = \"1950-01-01\"\n",
    "end_date = date.today()\n",
    "\n",
    "bbg_raw = download_bbg_data(tickers_spx, fields, start_date, end_date)\n",
    "bbg_raw = bbg_raw.rename(columns = {'SPX Index_PX_LAST': 'US_recession_probability'})\n",
    "bbg_raw['Date'] = pd.to_datetime(bbg_raw['Date'])  # Ensure datetime\n",
    "bbg_raw.set_index('Date', inplace=True) \n",
    "\n",
    "def rolling_correlation_with_recession(df, window):\n",
    "    \"\"\"\n",
    "    Calculate rolling correlation between 'US_recession_probability' and all other columns,\n",
    "    and return a DataFrame without NaN rows.\n",
    "\n",
    "    Parameters:\n",
    "        df (pd.DataFrame): Input DataFrame with 'US_recession_probability' and other columns.\n",
    "        window (int): Rolling window size.\n",
    "\n",
    "    Returns:\n",
    "        pd.DataFrame: Rolling correlation values (NaNs removed).\n",
    "    \"\"\"\n",
    "    df = df.copy()\n",
    "\n",
    "    # Ensure index is datetime\n",
    "    if not isinstance(df.index, pd.DatetimeIndex):\n",
    "        df.index = pd.to_datetime(df.index)\n",
    "\n",
    "    # Drop rows with missing values in the input\n",
    "    df = df.dropna()\n",
    "\n",
    "    result = pd.DataFrame(index=df.index)\n",
    "\n",
    "    # Calculate rolling correlation with US_recession_probability\n",
    "    for col in df.columns:\n",
    "        if col != 'US_recession_probability':\n",
    "            result[col] = df['US_recession_probability'].rolling(window).corr(df[col])\n",
    "\n",
    "    # Drop rows where all correlations are NaN (early window rows)\n",
    "    result = result.dropna(how='all')\n",
    "\n",
    "    return result\n",
    "\n",
    "# Find correlations\n",
    "window = 75\n",
    "df = rolling_correlation_with_recession(bbg_raw, window=window)\n",
    "df = df.reset_index()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52972b42-3591-4025-9c60-ce22f06e83fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv(\"rawdata_test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82a35d0c-2347-4285-8626-832d518c65da",
   "metadata": {},
   "outputs": [],
   "source": [
    "pip install dash plotly pandas\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e30f186b-c3eb-49e2-9165-bbb9a05138f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import dash\n",
    "from dash import dcc, html\n",
    "import plotly.express as px\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv(\"correlations_spx.csv\", parse_dates=[\"Date\"], index_col=\"Date\")\n",
    "df = df.reset_index()  # Convert index to column so Plotly can use it\n",
    "\n",
    "# Initialize app\n",
    "app = dash.Dash(__name__)\n",
    "app.title = \"EURUSD-SPX Correlation\"\n",
    "\n",
    "# Create figure\n",
    "fig = px.line(df, x=\"Date\", y=\"EURUSD\", title=\"EURUSD-SPX Correlation Over Time\")\n",
    "\n",
    "# Layout\n",
    "app.layout = html.Div([\n",
    "    html.H1(\"Correlation Dashboard\", style={'textAlign': 'center'}),\n",
    "    dcc.Graph(figure=fig)\n",
    "])\n",
    "\n",
    "# Run the app on host='0.0.0.0' to allow LAN access\n",
    "if __name__ == '__main__':\n",
    "    app.run(host=\"127.0.0.1\", port=8050, debug=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f4cf9e1-c138-4855-8d81-1a4eec27c807",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.reset_index()\n",
    "df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
